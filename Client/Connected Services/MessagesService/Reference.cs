//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Client.MessagesService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Messages", Namespace="http://schemas.datacontract.org/2004/07/Service")]
    [System.SerializableAttribute()]
    public partial class Messages : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageContentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ReceiverField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SenderField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MessageContent {
            get {
                return this.MessageContentField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageContentField, value) != true)) {
                    this.MessageContentField = value;
                    this.RaisePropertyChanged("MessageContent");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Receiver {
            get {
                return this.ReceiverField;
            }
            set {
                if ((object.ReferenceEquals(this.ReceiverField, value) != true)) {
                    this.ReceiverField = value;
                    this.RaisePropertyChanged("Receiver");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Sender {
            get {
                return this.SenderField;
            }
            set {
                if ((object.ReferenceEquals(this.SenderField, value) != true)) {
                    this.SenderField = value;
                    this.RaisePropertyChanged("Sender");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MessagesService.IMessagesService")]
    public interface IMessagesService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessagesService/SendMessage", ReplyAction="http://tempuri.org/IMessagesService/SendMessageResponse")]
        void SendMessage(string sender, string receiver, string messageContent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessagesService/SendMessage", ReplyAction="http://tempuri.org/IMessagesService/SendMessageResponse")]
        System.Threading.Tasks.Task SendMessageAsync(string sender, string receiver, string messageContent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessagesService/GetChat", ReplyAction="http://tempuri.org/IMessagesService/GetChatResponse")]
        Client.MessagesService.Messages[] GetChat(string user1, string user2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessagesService/GetChat", ReplyAction="http://tempuri.org/IMessagesService/GetChatResponse")]
        System.Threading.Tasks.Task<Client.MessagesService.Messages[]> GetChatAsync(string user1, string user2);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMessagesServiceChannel : Client.MessagesService.IMessagesService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MessagesServiceClient : System.ServiceModel.ClientBase<Client.MessagesService.IMessagesService>, Client.MessagesService.IMessagesService {
        
        public MessagesServiceClient() {
        }
        
        public MessagesServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MessagesServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MessagesServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MessagesServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void SendMessage(string sender, string receiver, string messageContent) {
            base.Channel.SendMessage(sender, receiver, messageContent);
        }
        
        public System.Threading.Tasks.Task SendMessageAsync(string sender, string receiver, string messageContent) {
            return base.Channel.SendMessageAsync(sender, receiver, messageContent);
        }
        
        public Client.MessagesService.Messages[] GetChat(string user1, string user2) {
            return base.Channel.GetChat(user1, user2);
        }
        
        public System.Threading.Tasks.Task<Client.MessagesService.Messages[]> GetChatAsync(string user1, string user2) {
            return base.Channel.GetChatAsync(user1, user2);
        }
    }
}
